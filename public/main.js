'use strict';

var app = angular.module('App', ['ui.router', 'ngAnimate']);

app.config(function ($urlRouterProvider, $locationProvider) {
  $locationProvider.html5Mode(true);
  $urlRouterProvider.otherwise('/main');
});

app.run(function ($rootScope) {
  return $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, thrownError) {
    console.info('The following error was thrown by ui-router while transitioning to state "' + toState.name + '". The origin of this error is probably a resolve function:');
    console.error(thrownError);
  });
});

'use strict';

app.config(function ($stateProvider) {
  return $stateProvider.state('main', {
    url: '/main',
    views: {
      '': { templateUrl: 'src/templates/main.template.html', conroller: 'MainCtrl' },
      'bg@main': { templateUrl: 'src/templates/bg.template.html' },
      'form@main': { templateUrl: 'src/templates/form.template.html', controller: 'MainCtrl' },
      'footer@main': { templateUrl: 'src/templates/footer.template.html' }
    }
  });
});
'use strict';

app.factory('LoanFactory', function ($http, $log) {

  var calculate_schedule = function calculate_schedule(loan) {
    var d = new Date();
    var default_start_month = d.setDate(d.getMonth() + 1);
    var u = new Date(default_start_month);
    if (!loan.start_month) loan.start_month = u;

    var schedule = [];
    var m = +loan.number_of_months;
    var amount = +loan.amount;
    var r = +loan.custom_rate > 0 ? +loan.custom_rate / 100 : +loan.federal_rate;

    var annuity_factor = (1 - 1 / Math.pow(1 + r / 12, m)) / (r / 12);
    var pmt = amount / annuity_factor;

    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    var balance = amount;
    var paid_principal = 0;
    var y = 0;
    for (var i = 0; i < m; i++) {
      if ((loan.start_month.getMonth() + i) % 12 == 11) y += 1;
      var year = loan.start_month.getFullYear() + y;
      var month = months[(loan.start_month.getMonth() + i + 1) % 12] + '-' + year;

      if (i == m - 1) {
        var interest = (balance * (r / 12)).toFixed(2);
        var principal = (amount - paid_principal).toFixed(2);
        var payment = (Number(interest) + Number(principal)).toFixed(2);
        balance = 0;
        schedule.push({ month: month, payment: payment, principal: principal, interest: interest, balance: balance });
      } else {
        var _payment = pmt.toFixed(2);
        var _interest = (balance * (r / 12)).toFixed(2);
        var _principal = (_payment - balance * (r / 12)).toFixed(2);
        paid_principal += Number(_principal);
        balance = (balance - _principal).toFixed(2);
        schedule.push({ month: month, payment: _payment, principal: _principal, interest: _interest, balance: balance });
      }
    }
    return schedule;
  };

  return { calculate_schedule: calculate_schedule };
});

'use strict';

app.factory('RateFactory', function ($http, $log) {
  var rates = [];

  var fetch_rates = function fetch_rates() {
    if (rates.length == 0) return $http.get('/api/rates').then(function (res) {
      return rates = res.data;
    });else if (new Date() - rates[0].updated_at > 24 * 60 * 60 * 1000) return $http.get('/api/rates').then(function (res) {
      return rates = res.data;
    });
    return rates;
  };

  return { fetch_rates: fetch_rates };
});

'use strict';

app.controller('MainCtrl', function ($scope, RateFactory, LoanFactory) {

  RateFactory.fetch_rates().then(function (data) {
    return $scope.rates = data;
  });

  $scope.default_loan_form = { amount: '', start_month: '', number_of_months: '', custom_rate: '', federal_rate: '', federal: '', custom: '' };
  $scope.default_loan_schedule = [];
  $scope.default_result = { est_payment: '', subtotal_principal: '', subtotal_interest: '' };

  $scope.reset = function () {
    $scope.loan = angular.copy($scope.default_loan_form);
    $scope.schedule = angular.copy($scope.default_loan_schedule);
    $scope.result = angular.copy($scope.default_result);
    $scope.show_loan_schedule = false;
    $scope.loan_start_month_warning = '';
    $scope.loan_rate_error = '';
    $scope.loan_rate_warning = '';
    if ($scope.form) {
      $scope.form.$setPristine();
      $scope.form.$setUntouched();
    }
  };
  $scope.reset();

  $scope.update = function () {
    //TODO: money value format // const format = (n, currency) => currency + " " + Number(n).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
    $scope.validate_loan_rate();
    $scope.calculate_schedule();
  };

  $scope.toggle_show_loan_schedule = function () {
    if ($scope.schedule.length > 0) $scope.show_loan_schedule = !$scope.show_loan_schedule;
  };

  $scope.open_loan_schedule = function () {
    if ($scope.schedule.length > 0 && $scope.show_loan_schedule == true) return true;else return false;
  };

  $scope.validate_loan_rate = function () {
    $scope.loan_start_month_warning = '';
    $scope.loan_rate_error = '';
    $scope.loan_rate_warning = '';
    var _$scope$form = $scope.form,
        custom = _$scope$form.custom,
        federal = _$scope$form.federal,
        start = _$scope$form.start; // error validation

    var _$scope$loan = $scope.loan,
        custom_rate = _$scope$loan.custom_rate,
        federal_rate = _$scope$loan.federal_rate,
        start_month = _$scope$loan.start_month; // form values

    if (start.$touched && !start_month) $scope.loan_start_month_warning = 'If you don\'t choose a starting month, current month will be applied';
    if (custom.$pristine && federal.$pristine) $scope.loan_rate_error = '';else {
      if ((!custom_rate || custom_rate <= 0) && !federal_rate) $scope.loan_rate_error = 'Please either fill out the custom rate or select an option';
      if (custom_rate > 0 && federal_rate) $scope.loan_rate_warning = 'If you choose both interests, custom interest will be applied';
    }
  };

  $scope.calculate_schedule = function () {
    var _$scope$loan2 = $scope.loan,
        amount = _$scope$loan2.amount,
        start_month = _$scope$loan2.start_month,
        number_of_months = _$scope$loan2.number_of_months,
        custom_rate = _$scope$loan2.custom_rate,
        federal_rate = _$scope$loan2.federal_rate;

    if (+amount > 0 && +number_of_months > 0 && (+custom_rate > 0 || federal_rate > 0)) {
      $scope.schedule = LoanFactory.calculate_schedule($scope.loan);
      $scope.subtotal_payment = $scope.schedule.map(function (s) {
        return +s.payment;
      }).reduce(function (prev, curr) {
        return prev + curr;
      }, 0);
      $scope.subtotal_principal = $scope.schedule.map(function (s) {
        return +s.principal;
      }).reduce(function (prev, curr) {
        return prev + curr;
      }, 0);
      $scope.subtotal_interest = $scope.schedule.map(function (s) {
        return +s.interest;
      }).reduce(function (prev, curr) {
        return prev + curr;
      }, 0);

      $scope.result.est_payment = $scope.schedule[0].payment;
      $scope.result.subtotal_principal = $scope.subtotal_principal;
      $scope.result.subtotal_interest = $scope.subtotal_interest;
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
