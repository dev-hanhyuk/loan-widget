'use strict';

var app = angular.module('App', ['ui.router', 'ngAnimate']);

app.config(function ($urlRouterProvider, $locationProvider) {
  $locationProvider.html5Mode(true);
  $urlRouterProvider.otherwise('/main');
});

app.run(function ($rootScope) {
  return $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, thrownError) {
    console.info('The following error was thrown by ui-router while transitioning to state "' + toState.name + '". The origin of this error is probably a resolve function:');
    console.error(thrownError);
  });
});

'use strict';

app.config(function ($stateProvider) {
  return $stateProvider.state('main', {
    url: '/main',
    templateUrl: 'src/templates/main.template.html',
    conroller: 'MainCtrl'
  });
});
'use strict';

app.controller('MainCtrl', function ($scope) {
  console.log('controller');
});
'use strict';

app.factory('LoanFactory', function ($http, $log) {

  var calculate_schedule = function calculate_schedule(loan) {
    var d = new Date();
    var default_start_month = d.setDate(d.getMonth() + 1);
    var u = new Date(default_start_month);
    if (!loan.start_month) loan.start_month = u;

    var schedule = [];
    var m = +loan.number_of_months;
    var amount = +loan.amount;
    var r = +loan.custom_rate > 0 ? +loan.custom_rate / 100 : +loan.federal_rate;
    var annuity_factor = (1 - 1 / Math.pow(1 + r / m, m)) / (r / m);
    var pmt = amount / annuity_factor;
    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    var balance = amount;
    var paid_principal = 0;
    var y = 0;
    for (var i = 0; i < m; i++) {
      if ((loan.start_month.getMonth() + i) % 12 == 11) y += 1;
      var year = loan.start_month.getFullYear() + y;
      var month = months[(loan.start_month.getMonth() + i + 1) % 12] + '-' + year;
      if (i == m - 1) {
        var interest = (balance * (r / m)).toFixed(2);
        var principal = (amount - paid_principal).toFixed(2);
        var payment = (Number(interest) + Number(principal)).toFixed(2);
        balance = 0;
        schedule.push({ month: month, payment: payment, principal: principal, interest: interest, balance: balance });
      } else {

        var _payment = pmt.toFixed(2);
        var _interest = (balance * (r / m)).toFixed(2);
        var _principal = (_payment - balance * (r / m)).toFixed(2);
        paid_principal += Number(_principal);
        balance = (balance - _principal).toFixed(2);
        schedule.push({ month: month, payment: _payment, principal: _principal, interest: _interest, balance: balance });
      }
    }
    return schedule;
  };

  return { calculate_schedule: calculate_schedule };
});

'use strict';

app.factory('RateFactory', function ($http, $log) {
  var rates = [];

  var fetch_rates = function fetch_rates() {
    if (rates.length == 0) return $http.get('/api/rates').then(function (res) {
      return rates = res.data;
    });else if (new Date() - rates[0].updated_at > 24 * 60 * 60 * 1000) return $http.get('/api/rates').then(function (res) {
      return rates = res.data;
    });
    return rates;
  };

  return { fetch_rates: fetch_rates };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
